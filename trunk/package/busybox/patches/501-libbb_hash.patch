Index: busybox-1.8.1/coreutils/md5_sha1_sum.c
===================================================================
--- busybox-1.8.1.orig/coreutils/md5_sha1_sum.c	2007-11-10 02:40:51.000000000 +0100
+++ busybox-1.8.1/coreutils/md5_sha1_sum.c	2007-11-10 17:05:59.957468399 +0100
@@ -8,75 +8,10 @@
 
 #include "libbb.h"
 
-typedef enum { HASH_SHA1, HASH_MD5 } hash_algo_t;
-
 #define FLAG_SILENT	1
 #define FLAG_CHECK	2
 #define FLAG_WARN	4
 
-/* This might be useful elsewhere */
-static unsigned char *hash_bin_to_hex(unsigned char *hash_value,
-				unsigned hash_length)
-{
-	/* xzalloc zero-terminates */
-	char *hex_value = xzalloc((hash_length * 2) + 1);
-	bin2hex(hex_value, (char*)hash_value, hash_length);
-	return hex_value;
-}
-
-static uint8_t *hash_file(const char *filename, hash_algo_t hash_algo)
-{
-	int src_fd, hash_len, count;
-	union _ctx_ {
-		sha1_ctx_t sha1;
-		md5_ctx_t md5;
-	} context;
-	uint8_t *hash_value = NULL;
-	RESERVE_CONFIG_UBUFFER(in_buf, 4096);
-	void (*update)(const void*, size_t, void*);
-	void (*final)(void*, void*);
-
-	src_fd = STDIN_FILENO;
-	if (NOT_LONE_DASH(filename)) {
-		src_fd = open_or_warn(filename, O_RDONLY);
-		if (src_fd < 0) {
-			return NULL;
-		}
-	}
-
-	/* figure specific hash algorithims */
-	if (ENABLE_MD5SUM && hash_algo==HASH_MD5) {
-		md5_begin(&context.md5);
-		update = (void (*)(const void*, size_t, void*))md5_hash;
-		final = (void (*)(void*, void*))md5_end;
-		hash_len = 16;
-	} else if (ENABLE_SHA1SUM && hash_algo==HASH_SHA1) {
-		sha1_begin(&context.sha1);
-		update = (void (*)(const void*, size_t, void*))sha1_hash;
-		final = (void (*)(void*, void*))sha1_end;
-		hash_len = 20;
-	} else {
-		bb_error_msg_and_die("algorithm not supported");
-	}
-
-	while (0 < (count = safe_read(src_fd, in_buf, 4096))) {
-		update(in_buf, count, &context);
-	}
-
-	if (count == 0) {
-		final(in_buf, &context);
-		hash_value = hash_bin_to_hex(in_buf, hash_len);
-	}
-
-	RELEASE_CONFIG_BUFFER(in_buf);
-
-	if (src_fd != STDIN_FILENO) {
-		close(src_fd);
-	}
-
-	return hash_value;
-}
-
 int md5_sha1_sum_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int md5_sha1_sum_main(int argc, char **argv)
 {
Index: busybox-1.8.1/include/libbb.h
===================================================================
--- busybox-1.8.1.orig/include/libbb.h	2007-11-10 16:55:07.048261223 +0100
+++ busybox-1.8.1/include/libbb.h	2007-11-10 17:04:07.543062264 +0100
@@ -1022,6 +1022,7 @@
 extern const char bb_uuenc_tbl_std[];
 void bb_uuencode(char *store, const void *s, int length, const char *tbl);
 
+typedef enum { HASH_SHA1, HASH_MD5 } hash_algo_t;
 typedef struct sha1_ctx_t {
 	uint32_t count[2];
 	uint32_t hash[5];
@@ -1043,6 +1044,8 @@
 void md5_begin(md5_ctx_t *ctx);
 void md5_hash(const void *data, size_t length, md5_ctx_t *ctx);
 void *md5_end(void *resbuf, md5_ctx_t *ctx);
+unsigned char *hash_bin_to_hex(unsigned char *hash_value, unsigned hash_length);
+uint8_t *hash_file(const char *filename, hash_algo_t hash_algo);
 
 uint32_t *crc32_filltable(uint32_t *tbl256, int endian);
 
Index: busybox-1.8.1/libbb/Kbuild
===================================================================
--- busybox-1.8.1.orig/libbb/Kbuild	2007-11-10 02:40:52.000000000 +0100
+++ busybox-1.8.1/libbb/Kbuild	2007-11-10 17:04:07.547062497 +0100
@@ -39,6 +39,7 @@
 lib-y += get_last_path_component.o
 lib-y += get_line_from_file.o
 lib-y += getopt32.o
+lib-y += hash.o
 lib-y += herror_msg.o
 lib-y += herror_msg_and_die.o
 lib-y += human_readable.o
Index: busybox-1.8.1/libbb/hash.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ busybox-1.8.1/libbb/hash.c	2007-11-10 17:04:07.551062729 +0100
@@ -0,0 +1,81 @@
+/*
+ *  Copyright (C) 2003 Glenn L. McGrath
+ *  Copyright (C) 2003-2004 Erik Andersen
+ *
+ * Licensed under the GPL v2 or later, see the file LICENSE in this tarball.
+ */
+
+#include <fcntl.h>
+#include <limits.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#include "busybox.h"
+
+/* This might be useful elsewhere */
+unsigned char *hash_bin_to_hex(unsigned char *hash_value,
+				unsigned hash_length)
+{
+	/* xzalloc zero-terminates */
+	char *hex_value = xzalloc((hash_length * 2) + 1);
+	bin2hex(hex_value, (char*)hash_value, hash_length);
+	return hex_value;
+}
+
+uint8_t *hash_file(const char *filename, hash_algo_t hash_algo)
+{
+	int src_fd, hash_len, count;
+	union _ctx_ {
+		sha1_ctx_t sha1;
+		md5_ctx_t md5;
+	} context;
+	uint8_t *hash_value = NULL;
+	RESERVE_CONFIG_UBUFFER(in_buf, 4096);
+	void (*update)(const void*, size_t, void*);
+	void (*final)(void*, void*);
+
+	src_fd = STDIN_FILENO;
+	if (NOT_LONE_DASH(filename)) {
+		src_fd = open_or_warn(filename, O_RDONLY);
+		if (src_fd < 0) {
+			return NULL;
+		}
+	}
+
+	/* figure specific hash algorithims */
+	if (ENABLE_MD5SUM && hash_algo==HASH_MD5) {
+		md5_begin(&context.md5);
+		update = (void (*)(const void*, size_t, void*))md5_hash;
+		final = (void (*)(void*, void*))md5_end;
+		hash_len = 16;
+	} else if (ENABLE_SHA1SUM && hash_algo==HASH_SHA1) {
+		sha1_begin(&context.sha1);
+		update = (void (*)(const void*, size_t, void*))sha1_hash;
+		final = (void (*)(void*, void*))sha1_end;
+		hash_len = 20;
+	} else {
+		bb_error_msg_and_die("algorithm not supported");
+	}
+
+	while (0 < (count = safe_read(src_fd, in_buf, 4096))) {
+		update(in_buf, count, &context);
+	}
+
+	if (count == 0) {
+		final(in_buf, &context);
+		hash_value = hash_bin_to_hex(in_buf, hash_len);
+	}
+
+	RELEASE_CONFIG_BUFFER(in_buf);
+
+	if (src_fd != STDIN_FILENO) {
+		close(src_fd);
+	}
+
+	return hash_value;
+}
+
+
