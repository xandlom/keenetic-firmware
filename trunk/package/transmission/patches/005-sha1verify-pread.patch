diff -U 3 -dHBbrN -- transmission-1.83.orig/libtransmission/crypto.c transmission-1.83/libtransmission/crypto.c
--- transmission-1.83.orig/libtransmission/crypto.c	2010-01-29 04:01:32.000000000 +0300
+++ transmission-1.83/libtransmission/crypto.c	2010-02-03 19:30:01.000000000 +0300
@@ -25,6 +25,9 @@
 #include <openssl/sha.h>
 #include <openssl/rand.h>
 
+
+#include "sha1.h"
+
 #include <event.h>
 
 #include "crypto.h"
@@ -43,10 +46,10 @@
          ... )
 {
     va_list vl;
-    SHA_CTX sha;
+    blk_SHA_CTX sha;
 
-    SHA1_Init( &sha );
-    SHA1_Update( &sha, content1, content1_len );
+    blk_SHA1_Init( &sha );
+    blk_SHA1_Update( &sha, content1, content1_len );
 
     va_start( vl, content1_len );
     for( ; ; )
@@ -55,10 +58,10 @@
         const int    content_len = content ? (int) va_arg( vl, int ) : -1;
         if( content == NULL || content_len < 1 )
             break;
-        SHA1_Update( &sha, content, content_len );
+        blk_SHA1_Update( &sha, content, content_len );
     }
     va_end( vl );
-    SHA1_Final( setme, &sha );
+    blk_SHA1_Final( setme, &sha );
 }
 
 /**
@@ -226,24 +229,19 @@
          RC4_KEY *    setme,
          const char * key )
 {
-    SHA_CTX sha;
+    blk_SHA_CTX sha;
     uint8_t buf[SHA_DIGEST_LENGTH];
 
     assert( crypto->torrentHashIsSet );
     assert( crypto->mySecretIsSet );
 
-    if( SHA1_Init( &sha )
-        && SHA1_Update( &sha, key, 4 )
-        && SHA1_Update( &sha, crypto->mySecret, KEY_LEN )
-        && SHA1_Update( &sha, crypto->torrentHash, SHA_DIGEST_LENGTH )
-        && SHA1_Final( buf, &sha ) )
-    {
+    blk_SHA1_Init( &sha );
+    blk_SHA1_Update( &sha, key, 4 );
+    blk_SHA1_Update( &sha, crypto->mySecret, KEY_LEN );
+    blk_SHA1_Update( &sha, crypto->torrentHash, SHA_DIGEST_LENGTH );
+    blk_SHA1_Final( buf, &sha );
+    
         RC4_set_key( setme, SHA_DIGEST_LENGTH, buf );
-    }
-    else
-    {
-        logErrorFromSSL( );
-    }
 }
 
 void
diff -U 3 -dHBbrN -- transmission-1.83.orig/libtransmission/inout.c transmission-1.83/libtransmission/inout.c
--- transmission-1.83.orig/libtransmission/inout.c	2010-01-29 04:01:32.000000000 +0300
+++ transmission-1.83/libtransmission/inout.c	2010-02-03 19:27:28.000000000 +0300
@@ -23,7 +23,7 @@
 #include <sys/stat.h>
 #include <unistd.h>
 
-#include <openssl/sha.h>
+#include "sha1.h"
 
 #include "transmission.h"
 #include "crypto.h"
@@ -298,7 +298,7 @@
     uint32_t offset = 0;
     tr_bool  success = TRUE;
     uint8_t  stackbuf[MAX_STACK_ARRAY_SIZE];
-    SHA_CTX  sha;
+    blk_SHA_CTX  sha;
 
     /* fallback buffer */
     if( ( buffer == NULL ) || ( buflen < 1 ) )
@@ -313,7 +313,7 @@
     assert( buflen > 0 );
     assert( setme != NULL );
 
-    SHA1_Init( &sha );
+    blk_SHA1_Init( &sha );
     bytesLeft = tr_torPieceCountBytes( tor, pieceIndex );
 
     while( bytesLeft )
@@ -322,13 +322,13 @@
         success = !tr_ioRead( tor, pieceIndex, offset, len, buffer );
         if( !success )
             break;
-        SHA1_Update( &sha, buffer, len );
+        blk_SHA1_Update( &sha, buffer, len );
         offset += len;
         bytesLeft -= len;
     }
 
     if( success )
-        SHA1_Final( setme, &sha );
+        blk_SHA1_Final( setme, &sha );
 
     return success;
 }
diff -U 3 -dHBbrN -- transmission-1.83.orig/libtransmission/Makefile.am transmission-1.83/libtransmission/Makefile.am
--- transmission-1.83.orig/libtransmission/Makefile.am	2010-01-29 04:01:32.000000000 +0300
+++ transmission-1.83/libtransmission/Makefile.am	2010-02-03 18:58:33.000000000 +0300
@@ -61,7 +61,8 @@
     verify.c \
     web.c \
     webseed.c \
-    wildmat.c
+    wildmat.c \
+    sha1.c
 
 noinst_HEADERS = \
     announcer.h \
@@ -111,7 +112,8 @@
     verify.h \
     version.h \
     web.h \
-    webseed.h
+    webseed.h \
+    sha1.h
 
 TESTS = \
     blocklist-test \
diff -U 3 -dHBbrN -- transmission-1.83.orig/libtransmission/Makefile.in transmission-1.83/libtransmission/Makefile.in
--- transmission-1.83.orig/libtransmission/Makefile.in	2010-01-29 04:06:09.000000000 +0300
+++ transmission-1.83/libtransmission/Makefile.in	2010-02-03 18:58:33.000000000 +0300
@@ -82,7 +82,7 @@
 	torrent-magnet.$(OBJEXT) tr-dht.$(OBJEXT) tr-getopt.$(OBJEXT) \
 	trevent.$(OBJEXT) upnp.$(OBJEXT) utils.$(OBJEXT) \
 	verify.$(OBJEXT) web.$(OBJEXT) webseed.$(OBJEXT) \
-	wildmat.$(OBJEXT)
+	wildmat.$(OBJEXT) sha1.$(OBJEXT)
 libtransmission_a_OBJECTS = $(am_libtransmission_a_OBJECTS)
 am__EXEEXT_1 = blocklist-test$(EXEEXT) bencode-test$(EXEEXT) \
 	clients-test$(EXEEXT) json-test$(EXEEXT) magnet-test$(EXEEXT) \
@@ -434,7 +434,8 @@
     verify.c \
     web.c \
     webseed.c \
-    wildmat.c
+    wildmat.c \
+    sha1.c
 
 noinst_HEADERS = \
     announcer.h \
@@ -484,7 +485,8 @@
     verify.h \
     version.h \
     web.h \
-    webseed.h
+    webseed.h \
+    sha1.h
 
 apps_ldflags = \
     @ZLIB_LDFLAGS@
diff -U 3 -dHBbrN -- transmission-1.83.orig/libtransmission/sha1.c transmission-1.83/libtransmission/sha1.c
--- transmission-1.83.orig/libtransmission/sha1.c	1970-01-01 03:00:00.000000000 +0300
+++ transmission-1.83/libtransmission/sha1.c	2010-02-03 18:58:33.000000000 +0300
@@ -0,0 +1,283 @@
+/*
+ * SHA1 routine optimized to do word accesses rather than byte accesses,
+ * and to avoid unnecessary copies into the context array.
+ *
+ * This was initially based on the Mozilla SHA1 implementation, although
+ * none of the original Mozilla code remains.
+ */
+
+/* this is only to get definitions for memcpy(), ntohl() and htonl() */
+#include <stdio.h>
+#include <stdlib.h>
+#include <memory.h>
+#include "sha1.h"
+
+#if defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))
+
+/*
+ * Force usage of rol or ror by selecting the one with the smaller constant.
+ * It _can_ generate slightly smaller code (a constant of 1 is special), but
+ * perhaps more importantly it's possibly faster on any uarch that does a
+ * rotate with a loop.
+ */
+
+#define SHA_ASM(op, x, n) ({ unsigned int __res; __asm__(op " %1,%0":"=r" (__res):"i" (n), "0" (x)); __res; })
+#define SHA_ROL(x,n)	SHA_ASM("rol", x, n)
+#define SHA_ROR(x,n)	SHA_ASM("ror", x, n)
+
+#else
+
+#define SHA_ROT(X,l,r)	(((X) << (l)) | ((X) >> (r)))
+#define SHA_ROL(X,n)	SHA_ROT(X,n,32-(n))
+#define SHA_ROR(X,n)	SHA_ROT(X,32-(n),n)
+
+#endif
+
+/*
+ * If you have 32 registers or more, the compiler can (and should)
+ * try to change the array[] accesses into registers. However, on
+ * machines with less than ~25 registers, that won't really work,
+ * and at least gcc will make an unholy mess of it.
+ *
+ * So to avoid that mess which just slows things down, we force
+ * the stores to memory to actually happen (we might be better off
+ * with a 'W(t)=(val);asm("":"+m" (W(t))' there instead, as
+ * suggested by Artur Skawina - that will also make gcc unable to
+ * try to do the silly "optimize away loads" part because it won't
+ * see what the value will be).
+ *
+ * Ben Herrenschmidt reports that on PPC, the C version comes close
+ * to the optimized asm with this (ie on PPC you don't want that
+ * 'volatile', since there are lots of registers).
+ *
+ * On ARM we get the best code generation by forcing a full memory barrier
+ * between each SHA_ROUND, otherwise gcc happily get wild with spilling and
+ * the stack frame size simply explode and performance goes down the drain.
+ */
+
+#if defined(__i386__) || defined(__x86_64__)
+  #define setW(x, val) (*(volatile unsigned int *)&W(x) = (val))
+#elif defined(__GNUC__) && defined(__arm__)
+  #define setW(x, val) do { W(x) = (val); __asm__("":::"memory"); } while (0)
+#else
+  #define setW(x, val) (W(x) = (val))
+#endif
+
+/*
+ * Performance might be improved if the CPU architecture is OK with
+ * unaligned 32-bit loads and a fast ntohl() is available.
+ * Otherwise fall back to byte loads and shifts which is portable,
+ * and is faster on architectures with memory alignment issues.
+ */
+
+#if defined(__i386__) || defined(__x86_64__) || \
+    defined(__ppc__) || defined(__ppc64__) || \
+    defined(__powerpc__) || defined(__powerpc64__) || \
+    defined(__s390__) || defined(__s390x__)
+
+#define get_be32(p)	ntohl(*(unsigned int *)(p))
+#define put_be32(p, v)	do { *(unsigned int *)(p) = htonl(v); } while (0)
+
+#else
+
+#define get_be32(p)	( \
+	(*((unsigned char *)(p) + 0) << 24) | \
+	(*((unsigned char *)(p) + 1) << 16) | \
+	(*((unsigned char *)(p) + 2) <<  8) | \
+	(*((unsigned char *)(p) + 3) <<  0) )
+#define put_be32(p, v)	do { \
+	unsigned int __v = (v); \
+	*((unsigned char *)(p) + 0) = __v >> 24; \
+	*((unsigned char *)(p) + 1) = __v >> 16; \
+	*((unsigned char *)(p) + 2) = __v >>  8; \
+	*((unsigned char *)(p) + 3) = __v >>  0; } while (0)
+
+#endif
+
+/* This "rolls" over the 512-bit array */
+#define W(x) (array[(x)&15])
+
+/*
+ * Where do we get the source from? The first 16 iterations get it from
+ * the input data, the next mix it from the 512-bit array.
+ */
+#define SHA_SRC(t) get_be32(data + t)
+#define SHA_MIX(t) SHA_ROL(W(t+13) ^ W(t+8) ^ W(t+2) ^ W(t), 1)
+
+#define SHA_ROUND(t, input, fn, constant, A, B, C, D, E) do { \
+	unsigned int TEMP = input(t); setW(t, TEMP); \
+	E += TEMP + SHA_ROL(A,5) + (fn) + (constant); \
+	B = SHA_ROR(B, 2); } while (0)
+
+#define T_0_15(t, A, B, C, D, E)  SHA_ROUND(t, SHA_SRC, (((C^D)&B)^D) , 0x5a827999, A, B, C, D, E )
+#define T_16_19(t, A, B, C, D, E) SHA_ROUND(t, SHA_MIX, (((C^D)&B)^D) , 0x5a827999, A, B, C, D, E )
+#define T_20_39(t, A, B, C, D, E) SHA_ROUND(t, SHA_MIX, (B^C^D) , 0x6ed9eba1, A, B, C, D, E )
+#define T_40_59(t, A, B, C, D, E) SHA_ROUND(t, SHA_MIX, ((B&C)+(D&(B^C))) , 0x8f1bbcdc, A, B, C, D, E )
+#define T_60_79(t, A, B, C, D, E) SHA_ROUND(t, SHA_MIX, (B^C^D) ,  0xca62c1d6, A, B, C, D, E )
+
+static void blk_SHA1_Block(blk_SHA_CTX *ctx, const unsigned int *data)
+{
+	unsigned int A,B,C,D,E;
+	unsigned int array[16];
+
+	A = ctx->H[0];
+	B = ctx->H[1];
+	C = ctx->H[2];
+	D = ctx->H[3];
+	E = ctx->H[4];
+
+	/* Round 1 - iterations 0-16 take their input from 'data' */
+	T_0_15( 0, A, B, C, D, E);
+	T_0_15( 1, E, A, B, C, D);
+	T_0_15( 2, D, E, A, B, C);
+	T_0_15( 3, C, D, E, A, B);
+	T_0_15( 4, B, C, D, E, A);
+	T_0_15( 5, A, B, C, D, E);
+	T_0_15( 6, E, A, B, C, D);
+	T_0_15( 7, D, E, A, B, C);
+	T_0_15( 8, C, D, E, A, B);
+	T_0_15( 9, B, C, D, E, A);
+	T_0_15(10, A, B, C, D, E);
+	T_0_15(11, E, A, B, C, D);
+	T_0_15(12, D, E, A, B, C);
+	T_0_15(13, C, D, E, A, B);
+	T_0_15(14, B, C, D, E, A);
+	T_0_15(15, A, B, C, D, E);
+
+	/* Round 1 - tail. Input from 512-bit mixing array */
+	T_16_19(16, E, A, B, C, D);
+	T_16_19(17, D, E, A, B, C);
+	T_16_19(18, C, D, E, A, B);
+	T_16_19(19, B, C, D, E, A);
+
+	/* Round 2 */
+	T_20_39(20, A, B, C, D, E);
+	T_20_39(21, E, A, B, C, D);
+	T_20_39(22, D, E, A, B, C);
+	T_20_39(23, C, D, E, A, B);
+	T_20_39(24, B, C, D, E, A);
+	T_20_39(25, A, B, C, D, E);
+	T_20_39(26, E, A, B, C, D);
+	T_20_39(27, D, E, A, B, C);
+	T_20_39(28, C, D, E, A, B);
+	T_20_39(29, B, C, D, E, A);
+	T_20_39(30, A, B, C, D, E);
+	T_20_39(31, E, A, B, C, D);
+	T_20_39(32, D, E, A, B, C);
+	T_20_39(33, C, D, E, A, B);
+	T_20_39(34, B, C, D, E, A);
+	T_20_39(35, A, B, C, D, E);
+	T_20_39(36, E, A, B, C, D);
+	T_20_39(37, D, E, A, B, C);
+	T_20_39(38, C, D, E, A, B);
+	T_20_39(39, B, C, D, E, A);
+
+	/* Round 3 */
+	T_40_59(40, A, B, C, D, E);
+	T_40_59(41, E, A, B, C, D);
+	T_40_59(42, D, E, A, B, C);
+	T_40_59(43, C, D, E, A, B);
+	T_40_59(44, B, C, D, E, A);
+	T_40_59(45, A, B, C, D, E);
+	T_40_59(46, E, A, B, C, D);
+	T_40_59(47, D, E, A, B, C);
+	T_40_59(48, C, D, E, A, B);
+	T_40_59(49, B, C, D, E, A);
+	T_40_59(50, A, B, C, D, E);
+	T_40_59(51, E, A, B, C, D);
+	T_40_59(52, D, E, A, B, C);
+	T_40_59(53, C, D, E, A, B);
+	T_40_59(54, B, C, D, E, A);
+	T_40_59(55, A, B, C, D, E);
+	T_40_59(56, E, A, B, C, D);
+	T_40_59(57, D, E, A, B, C);
+	T_40_59(58, C, D, E, A, B);
+	T_40_59(59, B, C, D, E, A);
+
+	/* Round 4 */
+	T_60_79(60, A, B, C, D, E);
+	T_60_79(61, E, A, B, C, D);
+	T_60_79(62, D, E, A, B, C);
+	T_60_79(63, C, D, E, A, B);
+	T_60_79(64, B, C, D, E, A);
+	T_60_79(65, A, B, C, D, E);
+	T_60_79(66, E, A, B, C, D);
+	T_60_79(67, D, E, A, B, C);
+	T_60_79(68, C, D, E, A, B);
+	T_60_79(69, B, C, D, E, A);
+	T_60_79(70, A, B, C, D, E);
+	T_60_79(71, E, A, B, C, D);
+	T_60_79(72, D, E, A, B, C);
+	T_60_79(73, C, D, E, A, B);
+	T_60_79(74, B, C, D, E, A);
+	T_60_79(75, A, B, C, D, E);
+	T_60_79(76, E, A, B, C, D);
+	T_60_79(77, D, E, A, B, C);
+	T_60_79(78, C, D, E, A, B);
+	T_60_79(79, B, C, D, E, A);
+
+	ctx->H[0] += A;
+	ctx->H[1] += B;
+	ctx->H[2] += C;
+	ctx->H[3] += D;
+	ctx->H[4] += E;
+}
+
+void blk_SHA1_Init(blk_SHA_CTX *ctx)
+{
+	ctx->size = 0;
+
+	/* Initialize H with the magic constants (see FIPS180 for constants) */
+	ctx->H[0] = 0x67452301;
+	ctx->H[1] = 0xefcdab89;
+	ctx->H[2] = 0x98badcfe;
+	ctx->H[3] = 0x10325476;
+	ctx->H[4] = 0xc3d2e1f0;
+}
+
+void blk_SHA1_Update(blk_SHA_CTX *ctx, const void *data, unsigned long len)
+{
+	int lenW = ctx->size & 63;
+
+	ctx->size += len;
+
+	/* Read the data into W and process blocks as they get full */
+	if (lenW) {
+		int left = 64 - lenW;
+		if (len < left)
+			left = len;
+		memcpy(lenW + (char *)ctx->W, data, left);
+		lenW = (lenW + left) & 63;
+		len -= left;
+		data = ((const char *)data + left);
+		if (lenW)
+			return;
+		blk_SHA1_Block(ctx, ctx->W);
+	}
+	while (len >= 64) {
+		blk_SHA1_Block(ctx, data);
+		data = ((const char *)data + 64);
+		len -= 64;
+	}
+	if (len)
+		memcpy(ctx->W, data, len);
+}
+
+void blk_SHA1_Final(unsigned char hashout[20], blk_SHA_CTX *ctx)
+{
+	static const unsigned char pad[64] = { 0x80 };
+	unsigned int padlen[2];
+	int i;
+
+	/* Pad with a binary 1 (ie 0x80), then zeroes, then length */
+	padlen[0] = htonl(ctx->size >> 29);
+	padlen[1] = htonl(ctx->size << 3);
+
+	i = ctx->size & 63;
+	blk_SHA1_Update(ctx, pad, 1+ (63 & (55 - i)));
+	blk_SHA1_Update(ctx, padlen, 8);
+
+	/* Output hash */
+	for (i = 0; i < 5; i++)
+		put_be32(hashout + i*4, ctx->H[i]);
+}
diff -U 3 -dHBbrN -- transmission-1.83.orig/libtransmission/sha1.h transmission-1.83/libtransmission/sha1.h
--- transmission-1.83.orig/libtransmission/sha1.h	1970-01-01 03:00:00.000000000 +0300
+++ transmission-1.83/libtransmission/sha1.h	2010-02-03 18:58:33.000000000 +0300
@@ -0,0 +1,17 @@
+/*
+ * SHA1 routine optimized to do word accesses rather than byte accesses,
+ * and to avoid unnecessary copies into the context array.
+ *
+ * This was initially based on the Mozilla SHA1 implementation, although
+ * none of the original Mozilla code remains.
+ */
+
+typedef struct {
+	unsigned long long size;
+	unsigned int H[5];
+	unsigned int W[16];
+} blk_SHA_CTX;
+
+void blk_SHA1_Init(blk_SHA_CTX *ctx);
+void blk_SHA1_Update(blk_SHA_CTX *ctx, const void *dataIn, unsigned long len);
+void blk_SHA1_Final(unsigned char hashout[20], blk_SHA_CTX *ctx);
diff -U 3 -dHBbrN -- transmission-1.83.orig/libtransmission/verify.c transmission-1.83/libtransmission/verify.c
--- transmission-1.83.orig/libtransmission/verify.c	2010-01-29 04:01:32.000000000 +0300
+++ transmission-1.83/libtransmission/verify.c	2010-02-03 20:52:44.000000000 +0300
@@ -25,7 +25,7 @@
  #define HAVE_VALLOC
 #endif
 
-#include <openssl/sha.h>
+#include "sha1.h"
 
 #include "transmission.h"
 #include "completion.h"
@@ -44,7 +44,7 @@
 
 enum
 {
-    MSEC_TO_SLEEP_PER_SECOND_DURING_VERIFY = 200
+    MSEC_TO_SLEEP_PER_SECOND_DURING_VERIFY = 100
 };
 
 /* #define STOPWATCH */
@@ -52,7 +52,7 @@
 static tr_bool
 verifyTorrent( tr_torrent * tor, tr_bool * stopFlag )
 {
-    SHA_CTX sha;
+    blk_SHA_CTX sha;
     int fd = -1;
     int64_t filePos = 0;
     tr_bool changed = 0;
@@ -68,6 +68,7 @@
     int64_t buflen;
     uint8_t * buffer = NULL;
     const int64_t maxbuf = 16384;
+    ssize_t readed;
 
 #ifdef HAVE_GETPAGESIZE
     buflen = getpagesize();
@@ -88,7 +89,7 @@
     if( !buffer )
         buffer = malloc( buflen );
 
-    SHA1_Init( &sha );
+    blk_SHA1_Init( &sha );
 
     while( !*stopFlag && ( pieceIndex < tor->info.pieceCount ) )
     {
@@ -123,15 +124,14 @@
 
         /* read a bit */
         if( fd >= 0 ) {
-            const ssize_t numRead = tr_pread( fd, buffer, bytesThisPass, filePos );
-            if( numRead == bytesThisPass )
-                SHA1_Update( &sha, buffer, numRead );
-            if( numRead > 0 ) {
-                pieceBytesRead += numRead;
+    	     readed = tr_pread( fd, buffer, bytesThisPass, filePos );
+            if( readed > 0 ) {
+        	pieceBytesRead += readed;
+        	blk_SHA1_Update( &sha, buffer, readed );
 #if defined HAVE_POSIX_FADVISE && defined POSIX_FADV_DONTNEED
-                posix_fadvise( fd, filePos, bytesThisPass, POSIX_FADV_DONTNEED );
+        	posix_fadvise( fd, filePos, bytesThisPass, POSIX_FADV_DONTNEED );
 #endif
-            }
+	    }
         }
 
         /* move our offsets */
@@ -147,7 +147,7 @@
             tr_bool hasPiece;
             uint8_t hash[SHA_DIGEST_LENGTH];
 
-            SHA1_Final( hash, &sha );
+            blk_SHA1_Final( hash, &sha );
             hasPiece = !memcmp( hash, tor->info.pieces[pieceIndex].hash, SHA_DIGEST_LENGTH );
             /* fprintf( stderr, "do the hashes match? %s\n", (hasPiece?"yes":"no") ); */
 
@@ -170,7 +170,7 @@
                 tr_wait_msec( MSEC_TO_SLEEP_PER_SECOND_DURING_VERIFY );
             }
 
-            SHA1_Init( &sha );
+            blk_SHA1_Init( &sha );
             ++pieceIndex;
             piecePos = 0;
             pieceBytesRead = 0;
