diff -U 3 -dHBbrN -- busybox-1.15.1.orig/networking/udhcp/dhcpd.c busybox-1.15.1/networking/udhcp/dhcpd.c
--- busybox-1.15.1.orig/networking/udhcp/dhcpd.c	2009-09-12 19:55:36.000000000 +0400
+++ busybox-1.15.1/networking/udhcp/dhcpd.c	2010-05-24 15:00:39.000000000 +0400
@@ -30,6 +30,7 @@
 	struct dhcp_packet packet;
 	uint8_t *state;
 	uint32_t static_lease_ip;
+	char *cmd;
 	unsigned timeout_end;
 	unsigned num_ips;
 	unsigned opt;
@@ -276,8 +277,26 @@
 			break;
 		case DHCPRELEASE:
 			log1("Received RELEASE");
-			if (lease)
+			if (lease) {
 				lease->expires = time(NULL);
+				
+				if( server_config.notify_file ) {
+     				cmd = xasprintf("%s release %02x:%02x:%02x:%02x:%02x:%02x %u.%u.%u.%u", 
+     						server_config.notify_file,
+     						lease->lease_mac[0], lease->lease_mac[1], 
+     						lease->lease_mac[2], lease->lease_mac[3], 
+     						lease->lease_mac[4], lease->lease_mac[5], 
+     						(lease->lease_nip) & 0xff,
+     						(lease->lease_nip >> 8) & 0xff,
+     						(lease->lease_nip >> 16) & 0xff,
+     						(lease->lease_nip >> 24) & 0xff);
+     				
+     				if( cmd ) {		
+						system(cmd);
+						free(cmd);
+					}
+				}
+			}
 			break;
 		case DHCPINFORM:
 			log1("Received INFORM");
diff -U 3 -dHBbrN -- busybox-1.15.1.orig/networking/udhcp/dhcpd.h busybox-1.15.1/networking/udhcp/dhcpd.h
--- busybox-1.15.1.orig/networking/udhcp/dhcpd.h	2009-09-12 19:55:36.000000000 +0400
+++ busybox-1.15.1/networking/udhcp/dhcpd.h	2010-05-24 15:00:39.000000000 +0400
@@ -24,6 +24,12 @@
 	uint8_t mac[6];
 };
 
+struct vendor_set {
+	struct vendor_set *pnext;
+	char cvclass[64];
+	struct option_set *options;
+};
+
 struct server_config_t {
 	char *interface;                /* interface to use */
 //TODO: ifindex, server_nip, server_mac
@@ -59,6 +65,7 @@
 	char *sname;                    /* bootp server name */
 	char *boot_file;                /* bootp boot file option */
 	struct static_lease *static_leases; /* List of ip/mac pairs to assign static leases */
+	struct vendor_set *vendor_sets;	/* custom options on vendor class info */
 };
 
 #define server_config (*(struct server_config_t*)&bb_common_bufsiz1)
diff -U 3 -dHBbrN -- busybox-1.15.1.orig/networking/udhcp/files.c busybox-1.15.1/networking/udhcp/files.c
--- busybox-1.15.1.orig/networking/udhcp/files.c	2009-09-12 19:55:36.000000000 +0400
+++ busybox-1.15.1/networking/udhcp/files.c	2010-05-24 18:44:12.000000000 +0400
@@ -275,6 +275,45 @@
 	return 1;
 }
 
+static int FAST_FUNC read_vendor(const char *const_line, void *arg) {
+	char *line, *vclass, *vfile, *token[2];
+	parser_t *parser;
+	struct vendor_set **ppvs = (struct vendor_set **)arg;
+	struct vendor_set *pvs;
+	
+	vclass = (char *)const_line;
+	vfile  = vclass + strlen(vclass) - 1;
+	
+	while( vfile >= vclass )
+		if( *vfile == '\t' || *vfile == ' ' ) { *vfile++ = 0; break; } 
+		else vfile--;
+
+	if( vfile > vclass ) {
+		if( *vclass == '"' ) {
+			vclass++;
+			if( (line = strrchr(vclass, '"')) ) *line = 0;
+		}
+
+		if( (parser = config_open(vfile)) ) {
+			while( (pvs = *ppvs) != NULL )
+				ppvs = &pvs->pnext;
+			
+			*ppvs = pvs = xzalloc(sizeof(*pvs));
+			strncpy(pvs->cvclass, vclass, sizeof(pvs->cvclass) - 1);
+			pvs->cvclass[sizeof(pvs->cvclass) - 1] = 0;
+		
+			while( config_read(parser, token, 2, 2, "# \t", PARSE_NORMAL) ) {
+				if( !strcasecmp(token[0], "opt") || !strcasecmp(token[0], "option") ) {
+					read_opt(token[1], &pvs->options);
+				}
+			}
+			config_close(parser);
+		}
+	}
+	
+	return 1;
+}
+
 
 struct config_keyword {
 	const char *keyword;
@@ -306,6 +345,7 @@
 	{"sname",        read_str, &(server_config.sname),        ""},
 	{"boot_file",    read_str, &(server_config.boot_file),    ""},
 	{"static_lease", read_staticlease, &(server_config.static_leases), ""},
+	{"vendor_class", read_vendor, &(server_config.vendor_sets), ""},
 };
 enum { KWS_WITH_DEFAULTS = ARRAY_SIZE(keywords) - 6 };
 
@@ -378,13 +418,6 @@
 		g_leases[i].expires = tmp_time;
 	}
 	close(fd);
-
-	if (server_config.notify_file) {
-// TODO: vfork-based child creation
-		char *cmd = xasprintf("%s %s", server_config.notify_file, server_config.lease_file);
-		system(cmd);
-		free(cmd);
-	}
 }
 
 
Двоичные файлы busybox-1.15.1.orig/networking/udhcp/lib.a и busybox-1.15.1/networking/udhcp/lib.a различаются
diff -U 3 -dHBbrN -- busybox-1.15.1.orig/networking/udhcp/options.c busybox-1.15.1/networking/udhcp/options.c
--- busybox-1.15.1.orig/networking/udhcp/options.c	2009-09-12 19:55:58.000000000 +0400
+++ busybox-1.15.1/networking/udhcp/options.c	2010-05-24 15:00:39.000000000 +0400
@@ -34,6 +34,7 @@
 	{ OPTION_STRING                           , 0x28 }, /* nisdomain          */
 	{ OPTION_IP | OPTION_LIST                 , 0x29 }, /* nissrv             */
 	{ OPTION_IP | OPTION_LIST     | OPTION_REQ, 0x2a }, /* DHCP_NTP_SERVER    */
+	{ OPTION_U8 | OPTION_LIST		| OPTION_REQ, 0x2b }, /* DHCP_VENOR_INFO	  */         
 	{ OPTION_IP | OPTION_LIST                 , 0x2c }, /* DHCP_WINS_SERVER   */
 	{ OPTION_IP                               , 0x32 }, /* DHCP_REQUESTED_IP  */
 	{ OPTION_U32                              , 0x33 }, /* DHCP_LEASE_TIME    */
@@ -84,6 +85,7 @@
 	"nisdomain" "\0"   /*                     */
 	"nissrv" "\0"      /*                     */
 	"ntpsrv" "\0"      /* DHCP_NTP_SERVER     */
+	"vendorinfo" "\0"	 /* DHCP_VENDOR_INFO		*/
 	"wins" "\0"        /* DHCP_WINS_SERVER    */
 	"requestip" "\0"   /* DHCP_REQUESTED_IP   */
 	"lease" "\0"       /* DHCP_LEASE_TIME     */
diff -U 3 -dHBbrN -- busybox-1.15.1.orig/networking/udhcp/options.h busybox-1.15.1/networking/udhcp/options.h
--- busybox-1.15.1.orig/networking/udhcp/options.h	2009-09-12 19:55:36.000000000 +0400
+++ busybox-1.15.1/networking/udhcp/options.h	2010-05-24 15:00:39.000000000 +0400
@@ -55,6 +55,7 @@
 #define DHCP_MTU                0x1a
 #define DHCP_BROADCAST          0x1c
 #define DHCP_NTP_SERVER         0x2a
+#define DHCP_VENDOR_INFO        0x2b
 #define DHCP_WINS_SERVER        0x2c
 #define DHCP_REQUESTED_IP       0x32
 #define DHCP_LEASE_TIME         0x33
diff -U 3 -dHBbrN -- busybox-1.15.1.orig/networking/udhcp/serverpacket.c busybox-1.15.1/networking/udhcp/serverpacket.c
--- busybox-1.15.1.orig/networking/udhcp/serverpacket.c	2009-09-12 19:55:36.000000000 +0400
+++ busybox-1.15.1/networking/udhcp/serverpacket.c	2010-05-24 19:21:08.000000000 +0400
@@ -131,8 +131,9 @@
 	uint32_t lease_time_sec = server_config.max_lease_sec;
 	uint32_t static_lease_ip;
 	uint8_t *req_ip_opt;
-	const char *p_host_name;
-	struct option_set *curr;
+	const char *p_host_name, *pvclass;
+	struct option_set *curr, *vopts;
+	struct vendor_set *vsets;
 	struct in_addr addr;
 
 	init_packet(&packet, oldpacket, DHCPOFFER);
@@ -192,13 +193,38 @@
 
 	add_simple_option(packet.options, DHCP_LEASE_TIME, htonl(lease_time_sec));
 
+	if( (pvclass = (const char*)get_option(oldpacket, DHCP_VENDOR)) ) {
+		vsets = server_config.vendor_sets;
+		while( vsets ) 
+			if( pvclass[OPT_LEN - OPT_DATA] == (uint8_t)strlen(vsets->cvclass) &&
+				 !memcmp(pvclass, vsets->cvclass, pvclass[OPT_LEN - OPT_DATA]) ) break;
+			else vsets = vsets->pnext;
+	} else vsets = NULL;
+	
 	curr = server_config.options;
+	
 	while (curr) {
-		if (curr->data[OPT_CODE] != DHCP_LEASE_TIME)
-			add_option_string(packet.options, curr->data);
+		if (curr->data[OPT_CODE] != DHCP_LEASE_TIME) {
+			if( !vsets ) add_option_string(packet.options, curr->data);
+			else {
+				vopts = vsets->options;
+				while( vopts ) 
+					if( curr->data[OPT_CODE] == vopts->data[OPT_CODE] ) break;
+					else vopts = vopts->next;
+				if( !vopts ) add_option_string(packet.options, curr->data);
+			}
+		}
 		curr = curr->next;
 	}
 
+	if( vsets ) { 
+		vopts = vsets->options;
+		while( vopts ) {
+			add_option_string(packet.options, vopts->data);
+			vopts = vopts->next;
+		}
+	}
+
 	add_bootp_options(&packet);
 
 	addr.s_addr = packet.yiaddr;
@@ -221,25 +247,55 @@
 int FAST_FUNC send_ACK(struct dhcp_packet *oldpacket, uint32_t yiaddr)
 {
 	struct dhcp_packet packet;
-	struct option_set *curr;
 	uint32_t lease_time_sec;
 	struct in_addr addr;
-	const char *p_host_name;
+	const char *p_host_name, *pvclass;
+	struct option_set *curr, *vopts;
+	struct vendor_set *vsets;
+	char *cmd;
+	int static_lease;
 
 	init_packet(&packet, oldpacket, DHCPACK);
 	packet.yiaddr = yiaddr;
 
 	lease_time_sec = select_lease_time(oldpacket);
+	static_lease = is_nip_reserved(server_config.static_leases, yiaddr) ? 1 : 0;
 
 	add_simple_option(packet.options, DHCP_LEASE_TIME, htonl(lease_time_sec));
 
+	if( (pvclass = (const char*)get_option(oldpacket, DHCP_VENDOR)) ) {
+		vsets = server_config.vendor_sets;
+		while( vsets ) 
+			if( pvclass[OPT_LEN - OPT_DATA] == (uint8_t)strlen(vsets->cvclass) &&
+				 !memcmp(pvclass, vsets->cvclass, pvclass[OPT_LEN - OPT_DATA]) ) break;
+			else vsets = vsets->pnext;
+	} else vsets = NULL;
+	
 	curr = server_config.options;
+	
 	while (curr) {
-		if (curr->data[OPT_CODE] != DHCP_LEASE_TIME)
-			add_option_string(packet.options, curr->data);
+		if (curr->data[OPT_CODE] != DHCP_LEASE_TIME) {
+			if( !vsets ) add_option_string(packet.options, curr->data);
+			else {
+				vopts = vsets->options;
+				while( vopts ) 
+					if( curr->data[OPT_CODE] == vopts->data[OPT_CODE] ) break;
+					else vopts = vopts->next;
+				if( !vopts ) add_option_string(packet.options, curr->data);
+			}
+		}
 		curr = curr->next;
 	}
 
+	if( vsets ) { 
+		vopts = vsets->options;
+		while( vopts ) {
+			add_option_string(packet.options, vopts->data);
+			vopts = vopts->next;
+		}
+		
+		if( !static_lease ) add_static_lease(&server_config.static_leases, oldpacket->chaddr, yiaddr);
+   }
 	add_bootp_options(&packet);
 
 	addr.s_addr = packet.yiaddr;
@@ -259,6 +315,26 @@
 		write_leases();
 	}
 
+	if( server_config.notify_file ) {
+   	cmd = xasprintf("%s ack %02x:%02x:%02x:%02x:%02x:%02x %u.%u.%u.%u %u %d %s", 
+     						server_config.notify_file,
+     						oldpacket->chaddr[0], oldpacket->chaddr[1], 
+     						oldpacket->chaddr[2], oldpacket->chaddr[3], 
+     						oldpacket->chaddr[4], oldpacket->chaddr[5], 
+     						(yiaddr) & 0xff,
+     						(yiaddr >> 8) & 0xff,
+     						(yiaddr >> 16) & 0xff,
+     						(yiaddr >> 24) & 0xff,
+     						lease_time_sec,
+     						static_lease,
+     						vsets ? vsets->cvclass : "");
+     				
+     	if( cmd ) {		
+			system(cmd);
+			free(cmd);
+		}
+	}
+
 	return 0;
 }
 
