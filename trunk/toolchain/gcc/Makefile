# Makefile for to build a gcc/uClibc toolchain
#
# Copyright (C) 2002-2003 Erik Andersen <andersen@uclibc.org>
# Copyright (C) 2004 Manuel Novoa III <mjn3@uclibc.org>
# Copyright (C) 2005-2006 Felix Fietkau <nbd@openwrt.org>
# Copyright (C) 2010 ZyXEL.ru
# Copyright (C) 2010,2011 NDM Systems
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

include $(TOPDIR)/rules.mk

PKG_NAME:=gcc
PKG_VERSION:=$(strip $(subst ",, $(CONFIG_GCC_VERSION)))#"))

PATCH_DIR=./patches/$(PKG_VERSION)
PKG_SOURCE_URL:=ftp://ftp.fu-berlin.de/unix/languages/gcc/releases/gcc-$(PKG_VERSION) \
	http://mirrors.rcn.net/pub/sourceware/gcc/releases/gcc-$(PKG_VERSION) \
	ftp://ftp.gnu.org/gnu/gcc/releases/gcc-$(PKG_VERSION)
PKG_SOURCE:=gcc-$(PKG_VERSION).tar.bz2
STAGING_DIR_HOST:=$(TOOLCHAIN_DIR)
BUILD_DIR_HOST:=$(BUILD_DIR_TOOLCHAIN)

include $(INCLUDE_DIR)/host-build.mk

STAMP_BUILT:=$(TOOLCHAIN_DIR)/stamp/.gcc-initial_installed
# fix build uclibc 0.9.3x
NEW_BUILD_OPTIONS:=
BUILD_DIR0:=
ifeq ($(CONFIG_UCLIBC_NEW_METHOD_BUILD),y)
NEW_BUILD_OPTIONS:=--disable-libgomp --disable-threads --with-newlib
BUILD_DIR0:=$(BUILD_DIR_HOST)/gcc-$(PKG_VERSION)-minimal
endif
BUILD_DIR1:=$(BUILD_DIR_HOST)/gcc-$(PKG_VERSION)-initial
BUILD_DIR2:=$(BUILD_DIR_HOST)/gcc-$(PKG_VERSION)-final

SEP:=,
TARGET_LANGUAGES:="c$(if $(CONFIG_INSTALL_LIBSTDCPP),$(SEP)c++)$(if $(CONFIG_INSTALL_LIBGCJ),$(SEP)java)"

define Stage0/Configure
	$(SED) 's,TARGET_CROSS=.*,TARGET_CROSS=$(REAL_GNU_TARGET_NAME)-,' $(TOOLCHAIN_DIR)/info.mk
	$(SED) 's,GCC_VERSION=.*,GCC_VERSION=$(PKG_VERSION),' $(TOOLCHAIN_DIR)/info.mk
	mkdir -p $(BUILD_DIR0)
	(cd $(BUILD_DIR0); rm -f config.cache; \
		SHELL="$(BASH)" \
		$(PKG_BUILD_DIR)/configure \
		--prefix=$(TOOLCHAIN_DIR) \
		--build=$(GNU_HOST_NAME) \
		--host=$(GNU_HOST_NAME) \
		--target=$(REAL_GNU_TARGET_NAME) \
		--enable-languages=c \
		--disable-shared \
		--with-sysroot=$(BUILD_DIR_HOST)/uClibc_dev/ \
		--disable-__cxa_atexit \
		--enable-target-optspace \
		--with-gnu-ld \
		--disable-nls \
		--disable-libmudflap \
		--disable-multilib \
		--disable-libgomp \
		--disable-nls \
		--with-newlib \
		--without-headers \
		--disable-libssp \
		--disable-threads \
		$(SOFT_FLOAT_CONFIG_OPTION) \
		$(call qstrip,$(CONFIG_EXTRA_GCC_CONFIG_OPTIONS)) \
	);
endef

define Stage1/Configure
	$(SED) 's,TARGET_CROSS=.*,TARGET_CROSS=$(REAL_GNU_TARGET_NAME)-,' $(TOOLCHAIN_DIR)/info.mk
	$(SED) 's,GCC_VERSION=.*,GCC_VERSION=$(PKG_VERSION),' $(TOOLCHAIN_DIR)/info.mk
	mkdir -p $(BUILD_DIR1)
	(cd $(BUILD_DIR1); rm -f config.cache; \
		SHELL="$(BASH)" \
		$(PKG_BUILD_DIR)/configure \
		--prefix=$(TOOLCHAIN_DIR) \
		--build=$(GNU_HOST_NAME) \
		--host=$(GNU_HOST_NAME) \
		--target=$(REAL_GNU_TARGET_NAME) \
		--enable-languages=c \
		--disable-shared \
		--with-sysroot=$(BUILD_DIR_HOST)/uClibc_dev/ \
		--disable-__cxa_atexit \
		--enable-target-optspace \
		--with-gnu-ld \
		--disable-nls \
		--disable-libmudflap \
		--disable-multilib \
		$(NEW_BUILD_OPTIONS) \
		$(SOFT_FLOAT_CONFIG_OPTION) \
		$(call qstrip,$(CONFIG_EXTRA_GCC_CONFIG_OPTIONS)) \
	);
endef

define Stage0/Compile
	export SHELL="$(BASH)"; $(MAKE) -C $(BUILD_DIR0) all-gcc
endef

define Stage0/Install
	export SHELL="$(BASH)"; $(MAKE) -C $(BUILD_DIR0) install-gcc
endef

BUILD_DIR1_OPT:=all-gcc
ifeq ($(CONFIG_UCLIBC_NEW_METHOD_BUILD),y)
BUILD_DIR1_OPT:=all-build-libiberty all-gcc
endif

define Stage1/Compile
	export SHELL="$(BASH)"; $(MAKE) -C $(BUILD_DIR1) $(BUILD_DIR1_OPT)
endef

define Stage1/Install
	export SHELL="$(BASH)"; $(MAKE) -C $(BUILD_DIR1) install-gcc
ifeq ($(CONFIG_UCLIBC_NEW_METHOD_BUILD),y)
	# XXX: glibc insists on linking against libgcc_eh
	( cd $(TOOLCHAIN_DIR)/lib/gcc/$(REAL_GNU_TARGET_NAME)/$(PKG_VERSION) ; \
		[ -e libgcc_eh.a ] || ln -sf libgcc.a libgcc_eh.a ; \
		cp libgcc.a libgcc_initial.a; \
	)
endif
endef

define Stage2/Configure
	mkdir -p $(BUILD_DIR2)
	# Important!  Required for limits.h to be fixed.
	rm -rf $(TOOLCHAIN_DIR)/$(REAL_GNU_TARGET_NAME)/sys-include
	ln -sf ../include $(TOOLCHAIN_DIR)/$(REAL_GNU_TARGET_NAME)/sys-include
	rm -rf $(TOOLCHAIN_DIR)/$(REAL_GNU_TARGET_NAME)/lib
	ln -sf ../lib $(TOOLCHAIN_DIR)/$(REAL_GNU_TARGET_NAME)/lib
	(cd $(BUILD_DIR2); rm -f config.cache; \
		SHELL="$(BASH)" \
		$(PKG_BUILD_DIR)/configure \
		--prefix=$(TOOLCHAIN_DIR) \
		--build=$(GNU_HOST_NAME) \
		--host=$(GNU_HOST_NAME) \
		--target=$(REAL_GNU_TARGET_NAME) \
		--enable-languages=$(TARGET_LANGUAGES) \
		--enable-shared \
		--disable-__cxa_atexit \
		--enable-target-optspace \
		--with-gnu-ld \
		--disable-nls \
		--disable-libmudflap \
		--disable-multilib \
		$(SOFT_FLOAT_CONFIG_OPTION) \
		$(call qstrip,$(CONFIG_EXTRA_GCC_CONFIG_OPTIONS)) \
	);
endef

define Stage2/Compile
	export SHELL="\$(BASH)"; \$(MAKE) -C \$(BUILD_DIR2) all
endef

define Stage2/Install
	$(MAKE) -C $(BUILD_DIR2) \
		SHELL="$(BASH)" \
		install
	# Set up the symlinks to enable lying about target name.
	set -e; \
	(cd $(TOOLCHAIN_DIR); \
		ln -sf $(REAL_GNU_TARGET_NAME) $(GNU_TARGET_NAME); \
		cd bin; \
		for app in $(REAL_GNU_TARGET_NAME)-* ; do \
			ln -sf $$$${app} \
		   	$(GNU_TARGET_NAME)$$$${app##$(REAL_GNU_TARGET_NAME)}; \
		done; \
	);
endef

#	(cd $(PKG_BUILD_DIR)/libstdc++-v3; autoconf;);
#	$(SED) 's,gcc_no_link=yes,gcc_no_link=no,' $(PKG_BUILD_DIR)/libstdc++-v3/configure

define Build/Prepare
	$(call Build/Prepare/Default)
	$(SED) 's,\(version_string.. = "[0-9\.]*\).*\(";\),\1 (ZyXEL_RU)\2,' $(PKG_BUILD_DIR)/gcc/version.c
ifeq ($(CONFIG_UCLIBC_NEW_METHOD_BUILD),y)
	$(call Stage0/Configure)
	$(call Stage0/Compile)
	$(call Stage0/Install)
endif	
endef

define Build/Configure
	$(call Stage1/Configure)
endef

define Build/Compile
	$(call Stage1/Compile)
	$(if $(wildcard $(TOOLCHAIN_DIR)/bin/$(GNU_TARGET_NAME)-gcc),,$(call Stage1/Install))
endef

define Build/Install
	$(call Stage2/Configure)
	$(call Stage2/Compile)
	$(call Stage2/Install)
endef

define Build/Clean
	rm -rf \
		$(PKG_BUILD_DIR) \
		$(BUILD_DIR0) \
		$(BUILD_DIR1) \
		$(BUILD_DIR2) \
		$(TOOLCHAIN_DIR)/$(REAL_GNU_TARGET_NAME) \
		$(TOOLCHAIN_DIR)/bin/$(REAL_GNU_TARGET_NAME)-gc* \
		$(TOOLCHAIN_DIR)/bin/$(REAL_GNU_TARGET_NAME)-c*
endef

$(eval $(call HostBuild))
