diff -upr gcc-3.4.6/gcc/config/mips/mips.h gcc-3.4.6.new/gcc/config/mips/mips.h
--- gcc-3.4.6/gcc/config/mips/mips.h	2004-07-15 04:42:49.000000000 +0400
+++ gcc-3.4.6.new/gcc/config/mips/mips.h	2008-07-23 19:50:20.000000000 +0400
@@ -170,6 +170,7 @@ extern const struct mips_cpu_info *mips_
 			   0x00800000	/* Store uninitialized
 					   consts in rodata */
 #define MASK_FIX_SB1       0x01000000   /* Work around SB-1 errata.  */
+#define MASK_PATFREE	   0x02000000	/* Only single precision FPU.  */
 
 					/* Debug switches, not documented */
 #define MASK_DEBUG	0		/* unused */
@@ -244,6 +245,7 @@ extern const struct mips_cpu_info *mips_
 #define TARGET_BIG_ENDIAN	(target_flags & MASK_BIG_ENDIAN)
 
 #define TARGET_SINGLE_FLOAT	(target_flags & MASK_SINGLE_FLOAT)
+#define TARGET_PATFREE		(target_flags & MASK_PATFREE)
 #define TARGET_DOUBLE_FLOAT	(! TARGET_SINGLE_FLOAT)
 
 #define TARGET_MAD		(target_flags & MASK_MAD)
@@ -457,6 +459,9 @@ extern const struct mips_cpu_info *mips_
       if (TARGET_SINGLE_FLOAT)					\
 	builtin_define ("__mips_single_float");		\
 								\
+      if (TARGET_PATFREE)					\
+	builtin_define ("__mips_patfree");		\
+								\
       if (TARGET_BIG_ENDIAN)					\
 	{							\
 	  builtin_define_std ("MIPSEB");			\
@@ -586,6 +591,8 @@ extern const struct mips_cpu_info *mips_
      N_("Use little-endian byte order")},				\
   {"single-float",	  MASK_SINGLE_FLOAT,				\
      N_("Use single (32-bit) FP only")},				\
+  {"patfree",		  MASK_PATFREE,				\
+     N_("Use pathent free instructions")},				\
   {"double-float",	 -MASK_SINGLE_FLOAT,				\
      N_("Don't use single (32-bit) FP only")},				\
   {"mad",		  MASK_MAD,					\
diff -upr gcc-3.4.6/gcc/config/mips/netbsd.h gcc-3.4.6.new/gcc/config/mips/netbsd.h
--- gcc-3.4.6/gcc/config/mips/netbsd.h	2004-01-31 09:18:40.000000000 +0300
+++ gcc-3.4.6.new/gcc/config/mips/netbsd.h	2008-07-23 19:49:20.000000000 +0400
@@ -116,6 +116,9 @@ Boston, MA 02111-1307, USA.  */
       if (TARGET_SINGLE_FLOAT)					\
 	builtin_define ("__mips_single_float");			\
 								\
+      if (TARGET_PATFREE)					\
+	builtin_define ("__mips_patfree");			\
+								\
       if (TARGET_BIG_ENDIAN)					\
 	builtin_define ("__MIPSEB__");				\
       else							\
diff -upr gcc-3.4.6/gcc/config/mips/mips.c gcc-3.4.6.new/gcc/config/mips/mips.c
--- gcc-3.4.6/gcc/config/mips/mips.c	2005-07-31 12:35:15.000000000 +0400
+++ gcc-3.4.6.new/gcc/config/mips/mips.c	2008-07-20 14:43:39.000000000 +0400
@@ -3448,8 +3448,11 @@ mips_block_move_straight (rtx dest, rtx 
      half-word alignment, it is usually better to move in half words.
      For instance, lh/lh/sh/sh is usually better than lwl/lwr/swl/swr
      and lw/lw/sw/sw is usually better than ldl/ldr/sdl/sdr.
-     Otherwise move word-sized chunks.  */
-  if (MEM_ALIGN (src) == BITS_PER_WORD / 2
+     Otherwise move word-sized chunks.  If lwl/lwr/swl/swr are not
+     available, move largest possible chunks allowed by alignment.  */
+  if (TARGET_PATFREE)
+    bits = MIN (MEM_ALIGN (src), MEM_ALIGN (dest));
+  else if (MEM_ALIGN (src) == BITS_PER_WORD / 2
       && MEM_ALIGN (dest) == BITS_PER_WORD / 2)
     bits = BITS_PER_WORD / 2;
   else
diff -upr gcc-3.4.6/gcc/config/mips/mips.md gcc-3.4.6.new/gcc/config/mips/mips.md
--- gcc-3.4.6/gcc/config/mips/mips.md	2005-07-31 12:35:15.000000000 +0400
+++ gcc-3.4.6.new/gcc/config/mips/mips.md	2008-07-20 14:43:06.000000000 +0400
@@ -4013,7 +4013,7 @@ dsrl\t%3,%3,1\n\
 	(sign_extract (match_operand:QI 1 "memory_operand" "")
 		      (match_operand 2 "immediate_operand" "")
 		      (match_operand 3 "immediate_operand" "")))]
-  "!TARGET_MIPS16"
+  "!TARGET_MIPS16 && !TARGET_PATFREE"
 {
   if (mips_expand_unaligned_load (operands[0], operands[1],
 				  INTVAL (operands[2]),
@@ -4028,7 +4028,7 @@ dsrl\t%3,%3,1\n\
 	(zero_extract (match_operand:QI 1 "memory_operand" "")
 		      (match_operand 2 "immediate_operand" "")
 		      (match_operand 3 "immediate_operand" "")))]
-  "!TARGET_MIPS16"
+  "!TARGET_MIPS16 && !TARGET_PATFREE"
 {
   if (mips_expand_unaligned_load (operands[0], operands[1],
 				  INTVAL (operands[2]),
@@ -4043,7 +4043,7 @@ dsrl\t%3,%3,1\n\
 		      (match_operand 1 "immediate_operand" "")
 		      (match_operand 2 "immediate_operand" ""))
 	(match_operand 3 "reg_or_0_operand" ""))]
-  "!TARGET_MIPS16"
+  "!TARGET_MIPS16 && !TARGET_PATFREE"
 {
   if (mips_expand_unaligned_store (operands[0], operands[3],
 				   INTVAL (operands[1]),
@@ -4070,7 +4070,7 @@ dsrl\t%3,%3,1\n\
 	(unspec:SI [(match_operand:BLK 1 "memory_operand" "m")
 		    (match_operand:QI 2 "memory_operand" "m")]
 		   UNSPEC_LWL))]
-  "!TARGET_MIPS16"
+  "!TARGET_MIPS16 && !TARGET_PATFREE"
   "lwl\t%0,%2"
   [(set_attr "type" "load")
    (set_attr "mode" "SI")])
@@ -4081,7 +4081,7 @@ dsrl\t%3,%3,1\n\
 		    (match_operand:QI 2 "memory_operand" "m")
 		    (match_operand:SI 3 "register_operand" "0")]
 		   UNSPEC_LWR))]
-  "!TARGET_MIPS16"
+  "!TARGET_MIPS16 && !TARGET_PATFREE"
   "lwr\t%0,%2"
   [(set_attr "type" "load")
    (set_attr "mode" "SI")])
@@ -4092,7 +4092,7 @@ dsrl\t%3,%3,1\n\
 	(unspec:BLK [(match_operand:SI 1 "reg_or_0_operand" "dJ")
 		     (match_operand:QI 2 "memory_operand" "m")]
 		    UNSPEC_SWL))]
-  "!TARGET_MIPS16"
+  "!TARGET_MIPS16 && !TARGET_PATFREE"
   "swl\t%z1,%2"
   [(set_attr "type" "store")
    (set_attr "mode" "SI")])
@@ -4103,7 +4103,7 @@ dsrl\t%3,%3,1\n\
 		     (match_operand:QI 2 "memory_operand" "m")
 		     (match_dup 0)]
 		    UNSPEC_SWR))]
-  "!TARGET_MIPS16"
+  "!TARGET_MIPS16 && !TARGET_PATFREE"
   "swr\t%z1,%2"
   [(set_attr "type" "store")
    (set_attr "mode" "SI")])
