diff -U 3 -H -w -B -E -d -r -N -- uClibc-0.9.29.orig/libc/inet/resolv.c uClibc-0.9.29/libc/inet/resolv.c
--- uClibc-0.9.29.orig/libc/inet/resolv.c	2010-08-27 02:33:28.000000000 +0400
+++ uClibc-0.9.29/libc/inet/resolv.c	2010-08-27 02:38:29.000000000 +0400
@@ -216,7 +216,7 @@
 #define MAX_RECURSE 5
 #define REPLY_TIMEOUT 10
 #define MAX_RETRIES 3
-#define MAX_SERVERS 3
+#define MAX_SERVERS 8
 #define MAX_SEARCH 4
 
 #define MAX_ALIASES	5
@@ -707,48 +707,54 @@
  * is pretty lame.  I think these two variables can probably be de-global-ized,
  * which should eliminate the need for doing locking here...  Needs a closer
  * look anyways. */
-static int ns=0, id=1;
+static int id = 1;
 
 int attribute_hidden __dns_lookup(const char *name, int type, int nscount, char **nsip,
 			   unsigned char **outpacket, struct resolv_answer *a)
 {
-	int i, j, len, fd, pos, rc;
+	int i, j, len, pos, rc;
 	struct timeval tv;
-	fd_set fds;
+	fd_set fdsets;
 	struct resolv_header h;
 	struct resolv_question q;
 	struct resolv_answer ma;
-	bool first_answer = 1;
-	unsigned retries = 0;
+	bool first_answer;
 	unsigned char * packet = malloc(PACKETSZ);
-	char *dns, *lookup = malloc(MAXDNAME);
-	int variant = -1;
+	char *lookup = malloc(MAXDNAME);
+	int variant;
 	struct sockaddr_in sa;
-	int local_ns = -1, local_id = -1;
+	int fds[MAX_SERVERS], ifds, ipos, ipass, itrys, imaxfd;
+	int sdomains;
+	int local_id;
 #ifdef __UCLIBC_HAS_IPV6__
 	bool v6;
 	struct sockaddr_in6 sa6;
 #endif
 
-	fd = -1;
+	ifds = 0;
+	for( ipos = 0; ipos < MAX_SERVERS; ipos++ ) fds[ipos] = -1;
 
-	if (!packet || !lookup || !nscount)
-	    goto fail;
+	if( !packet || !lookup || !nscount || !name[0] )  goto fail;
 
 	DPRINTF("Looking up type %d answer for '%s'\n", type, name);
 
+	itrys = MAX_RETRIES;
+	ifds = 0;
+	variant = -1;
+	while( itrys > 0 ) {
+		for( ipos = 0; ipos < ifds; ipos++ )
+			if( fds[ipos] != -1 ) {
+				close(fds[ipos]);
+				fds[ipos] = -1;
+			}
+
 	/* Mess with globals while under lock */
 	__UCLIBC_MUTEX_LOCK(mylock);
-	local_ns = ns % nscount;
 	local_id = id;
+		ifds = MIN(MAX_SERVERS, nscount);
 	__UCLIBC_MUTEX_UNLOCK(mylock);
 
-	while (retries < MAX_RETRIES) {
-		if (fd != -1)
-			close(fd);
-
 		memset(packet, 0, PACKETSZ);
-
 		memset(&h, 0, sizeof(h));
 
 		++local_id;
@@ -754,110 +760,116 @@
 		++local_id;
 		local_id &= 0xffff;
 		h.id = local_id;
-		__UCLIBC_MUTEX_LOCK(__resolv_lock);
-		/* this is really __nameserver[] which is a global that
-		   needs to hold __resolv_lock before access!! */
-		dns = nsip[local_ns];
-		__UCLIBC_MUTEX_UNLOCK(__resolv_lock);
-
 		h.qdcount = 1;
 		h.rd = 1;
 
 		DPRINTF("encoding header\n", h.rd);
 
-		i = __encode_header(&h, packet, PACKETSZ);
-		if (i < 0)
-			goto fail;
+		if( (i = __encode_header(&h, packet, PACKETSZ)) < 0 ) goto fail;
+
+		strncpy(lookup, name, MAXDNAME - 1);
+		lookup[MAXDNAME - 1] = 0;
 
-		strncpy(lookup,name,MAXDNAME);
 		if (variant >= 0) {
 			__UCLIBC_MUTEX_LOCK(__resolv_lock);
 			if (variant < __searchdomains) {
-				strncat(lookup,".", MAXDNAME);
-				strncat(lookup,__searchdomain[variant], MAXDNAME);
+				strncat(lookup, ".", MAXDNAME - 1);
+				strncat(lookup, __searchdomain[variant], MAXDNAME - 1);
+				lookup[MAXDNAME - 1] = 0;
 			}
 			__UCLIBC_MUTEX_UNLOCK(__resolv_lock);
 		}
+		
 		DPRINTF("lookup name: %s\n", lookup);
 		q.dotted = (char *)lookup;
 		q.qtype = type;
 		q.qclass = C_IN; /* CLASS_IN */
 
-		j = __encode_question(&q, packet+i, PACKETSZ-i);
-		if (j < 0)
-			goto fail;
-
+		if( (j = __encode_question(&q, packet + i, PACKETSZ - i)) < 0 ) goto fail;
 		len = i + j;
 
-		DPRINTF("On try %d, sending query to port %d of machine %s\n",
-				retries+1, NAMESERVER_PORT, dns);
+		ipass = 0;
+		/* Connect to the UDP socket so that asyncronous errors are returned */
 
+		for( ipos = 0; ipos < ifds; ipos++ ) {
 #ifdef __UCLIBC_HAS_IPV6__
 		__UCLIBC_MUTEX_LOCK(__resolv_lock);
 		/* 'dns' is really __nameserver[] which is a global that
 		   needs to hold __resolv_lock before access!! */
-		v6 = inet_pton(AF_INET6, dns, &sa6.sin6_addr) > 0;
+			v6 = inet_pton(AF_INET6, nsip[ipos], &sa6.sin6_addr) > 0 ? 1 : 0;
 		__UCLIBC_MUTEX_UNLOCK(__resolv_lock);
-		fd = socket(v6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
-#else
-		fd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
-#endif
-		if (fd < 0) {
-			retries++;
-		    continue;
-		}
 
-		/* Connect to the UDP socket so that asyncronous errors are returned */
-#ifdef __UCLIBC_HAS_IPV6__
 		if (v6) {
+				if( (fds[ipos] = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP)) != -1 ) {
 		    sa6.sin6_family = AF_INET6;
 		    sa6.sin6_port = htons(NAMESERVER_PORT);
 		    /* sa6.sin6_addr is already here */
-		    rc = connect(fd, (struct sockaddr *) &sa6, sizeof(sa6));
+					if( (rc = connect(fds[ipos], (struct sockaddr *) &sa6, sizeof(sa6))) < 0 ) {
+						close(fds[ipos]);
+						fds[ipos] = -1;
+					} else ipass = 1;
+				}
 		} else {
 #endif
+				if( (fds[ipos] = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) != -1 ) {
 		    sa.sin_family = AF_INET;
 		    sa.sin_port = htons(NAMESERVER_PORT);
 		    __UCLIBC_MUTEX_LOCK(__resolv_lock);
 		    /* 'dns' is really __nameserver[] which is a global that
 		       needs to hold __resolv_lock before access!! */
-		    sa.sin_addr.s_addr = inet_addr(dns);
+					sa.sin_addr.s_addr = inet_addr(nsip[ipos]);
 		    __UCLIBC_MUTEX_UNLOCK(__resolv_lock);
-		    rc = connect(fd, (struct sockaddr *) &sa, sizeof(sa));
+				
+					if( (rc = connect(fds[ipos], (struct sockaddr *) &sa, sizeof(sa))) < 0 ) {
+						close(fds[ipos]);
+						fds[ipos] = -1;
+					} else ipass = 1; 
+				}
 #ifdef __UCLIBC_HAS_IPV6__
 		}
 #endif
-		if (rc < 0) {
-		    if (errno == ENETUNREACH) {
-				/* routing error, presume not transient */
-				goto tryall;
-		    } else
-				/* retry */
-				retries++;
+		}
+		
+		if( !ipass ) {
+			--itrys;
 			continue;
 		}
 
 		DPRINTF("Transmitting packet of length %d, id=%d, qr=%d\n",
 				len, h.id, h.qr);
 
-		send(fd, packet, len, 0);
+		FD_ZERO(&fdsets);
+		
+		imaxfd = 0;
+		for( ipos = 0; ipos < ifds; ipos++ ) {
+			if( fds[ipos] != -1 ) {
+				send(fds[ipos], packet, len, 0);
+				FD_SET(fds[ipos], &fdsets);
+				if( fds[ipos] > imaxfd ) imaxfd = fds[ipos];
+			}
+		}
 
-		FD_ZERO(&fds);
-		FD_SET(fd, &fds);
 		tv.tv_sec = REPLY_TIMEOUT;
 		tv.tv_usec = 0;
-		if (select(fd + 1, &fds, NULL, NULL, &tv) <= 0) {
+
+		if( select(imaxfd + 1, &fdsets, NULL, NULL, &tv) <= 0 ) {
 		    DPRINTF("Timeout\n");
+		    --itrys;
+		    continue;
+		}
 
-			/* timed out, so retry send and receive,
-			 * to next nameserver on queue */
-			goto tryall;
+		ipass = 0;
+		ipos = 0;
+		while( ipos < ifds ) {
+			if( fds[ipos] == -1 || !FD_ISSET(fds[ipos], &fdsets) ) {
+				ipos++;
+				continue;
 		}
 
-		len = recv(fd, packet, 512, 0);
-		if (len < HFIXEDSZ) {
-			/* too short ! */
-			goto again;
+			memset(packet, 0, PACKETSZ);
+			if( (len = recv(fds[ipos], packet, PACKETSZ, 0)) < HFIXEDSZ ) {
+				ipos++;
+				continue;
 		}
 
 		__decode_header(packet, &h);
@@ -865,11 +877,10 @@
 		DPRINTF("id = %d, qr = %d\n", h.id, h.qr);
 
 		if ((h.id != local_id) || (!h.qr)) {
-			/* unsolicited */
-			goto again;
+				ipos++;
+				continue;
 		}
 
-
 		DPRINTF("Got response %s\n", "(i think)!");
 		DPRINTF("qrcount=%d,ancount=%d,nscount=%d,arcount=%d\n",
 				h.qdcount, h.ancount, h.nscount, h.arcount);
@@ -877,109 +888,97 @@
 				h.opcode, h.aa, h.tc, h.rd, h.ra, h.rcode);
 
 		if ((h.rcode) || (h.ancount < 1)) {
-			/* negative result, not present */
-			goto again;
+				ipos++;
+				continue;
 		}
 
 		pos = HFIXEDSZ;
-
+			i = -1;
 		for (j = 0; j < h.qdcount; j++) {
 			DPRINTF("Skipping question %d at %d\n", j, pos);
 			i = __length_question(packet, pos);
 			DPRINTF("Length of question %d is %d\n", j, i);
-			if (i < 0)
-				goto again;
-			pos += i;
+				if( i < 0 ) break;
+				else pos += i;
+		}
+			
+			if( i < 0 ) {
+				ipos++;
+				continue;
 		}
+			
 		DPRINTF("Decoding answer at pos %d\n", pos);
 
 		first_answer = 1;
-		for (j=0;j<h.ancount;j++,pos += i)
-			{
-				i = __decode_answer(packet, pos, &ma);
-
-				if (i<0) {
+			for( j = 0; j < h.ancount; j++, pos += i ) {
+				if( (i = __decode_answer(packet, pos, &ma)) < 0 ) {
 					DPRINTF("failed decode %d\n", i);
-					goto again;
+					break;
 				}
 
-				if ( first_answer )
-					{
+				if( first_answer ) {
 						ma.buf = a->buf;
 						ma.buflen = a->buflen;
 						ma.add_count = a->add_count;
 						memcpy(a, &ma, sizeof(ma));
-						if (a->atype != T_SIG && (0 == a->buf || (type != T_A && type != T_AAAA)))
-							{
-								break;
-							}
-						if (a->atype != type)
-							{
-								free(a->dotted);
+					if( a->atype != T_SIG && (0 == a->buf || (type != T_A && type != T_AAAA)) ) break;
+					if( a->atype != type ) {
 								continue;
 							}
 						a->add_count = h.ancount - j - 1;
-						if ((a->rdlength + sizeof(struct in_addr*)) * a->add_count > a->buflen)
-							{
-								break;
-							}
+					
+					if( (a->rdlength + sizeof(struct in_addr*)) * a->add_count > a->buflen ) break;
+					
 						a->add_count = 0;
 						first_answer = 0;
-					}
-				else
-					{
+				} else {
 						free(ma.dotted);
-						if (ma.atype != type)
-							{
-								continue;
-							}
-						if (a->rdlength != ma.rdlength)
-							{
+					if( ma.atype != type ) continue;
+					if( a->rdlength != ma.rdlength ) {
 								free(a->dotted);
 								DPRINTF("Answer address len(%u) differs from original(%u)\n",
 										ma.rdlength, a->rdlength);
-								goto again;
+						i = -1;
+						break;
 							}
 						memcpy(a->buf + (a->add_count * ma.rdlength), ma.rdata, ma.rdlength);
 						++a->add_count;
 					}
 			}
 
+			if( i < 0 ) {
+				ipos++;
+				continue;
+			}
+
 		DPRINTF("Answer name = |%s|\n", a->dotted);
 		DPRINTF("Answer type = |%d|\n", a->atype);
 
-		close(fd);
+			ipass = 1;
+			break;
+		}
+
+		if( ipass ) {
+			for( ipos = 0; ipos < ifds; ipos++ )
+				if( fds[ipos] != -1 ) {
+					close(fds[ipos]);
+					fds[ipos] = -1;
+				}
+
+			if( outpacket ) *outpacket = packet;
+			else free(packet);
 
-		if (outpacket)
-			*outpacket = packet;
-		else
-			free(packet);
 		free(lookup);
 
 		/* Mess with globals while under lock */
 		__UCLIBC_MUTEX_LOCK(mylock);
-		ns = local_ns;
 		id = local_id;
 		__UCLIBC_MUTEX_UNLOCK(mylock);
 
 		return (len);				/* success! */
-
-	tryall:
-		/* if there are other nameservers, give them a go,
-		   otherwise return with error */
-		{
-		    variant = -1;
-			local_ns = (local_ns + 1) % nscount;
-			if (local_ns == 0)
-				retries++;
-
-			continue;
 		}
 
-	again:
 		/* if there are searchdomains, try them or fallback as passed */
-		{
-		    int sdomains;
 		    __UCLIBC_MUTEX_LOCK(__resolv_lock);
 		    sdomains=__searchdomains;
 		    __UCLIBC_MUTEX_UNLOCK(__resolv_lock);
@@ -988,31 +987,27 @@
 				/* next search */
 				variant++;
 		    } else {
-				/* next server, first search */
-				local_ns = (local_ns + 1) % nscount;
-				if (local_ns == 0)
-					retries++;
-
+			/* next servers, first search */
 				variant = -1;
-		    }
+		   --itrys;
 		}
 	}
 
- fail:
-	if (fd != -1)
-	    close(fd);
-	if (lookup)
-	    free(lookup);
-	if (packet)
-	    free(packet);
-	h_errno = NETDB_INTERNAL;
-	/* Mess with globals while under lock */
-	if (local_ns != -1) {
 	    __UCLIBC_MUTEX_LOCK(mylock);
-	    ns = local_ns;
 	    id = local_id;
 	    __UCLIBC_MUTEX_UNLOCK(mylock);
+
+ fail:
+	for( ipos = 0; ipos < ifds; ipos++ )
+		if( fds[ipos] != -1 ) {
+			close(fds[ipos]);
+			fds[ipos] = -1;
 	}
+		
+	if( lookup ) free(lookup);
+	if( packet ) free(packet);
+	h_errno = NETDB_INTERNAL;
+
 	return -1;
 }
 #endif
